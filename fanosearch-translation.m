// Prints Macaulay2 code of the following form:
//
// R = (list of rays of toric variety)
// C = (list of cones of toric variety)
// F = normalToricVariety(R, C);
// X = (list of toric divisors cutting out the complete intersection)
// toric#"ID" = {F, X};
//
// where
// - `ID` -- Mori--Mukai ID
// - `weights` -- GIT description of toric variety
// - `bundle` -- list of divisors cutting out the complete intersection
ToricDescription := function(ID, weights, bundle)
  // translating the GIT description to a fan description
  fan := FanWithWeights(weights);

  // printing the rays
  printf "R = {";
  for i := 1 to #Rays(fan) do
    v := ElementToSequence(Vector(Rays(fan)[i]));

    printf "{";
    for j := 1 to #v do
      printf "%o", v[j];
      if j ne #v then printf ","; end if;
    end for;
    printf "}";

    if i ne #Rays(fan) then printf ", "; end if;
  end for;
  printf "};\n";

  // printing the cones
  printf "C = {";
  for i := 1 to #ConeIndices(fan) do
    v := SetToSequence(ConeIndices(fan)[i]);

    printf "{";
    for j := 1 to #v do
      printf "%o", v[j] - 1;
      if j ne #v then printf ","; end if;
    end for;
    printf "}";

    if i ne #ConeIndices(fan) then printf ", "; end if;
  end for;
  printf "};\n";

  // printing the Macaulay2 command to define the ambient
  printf "F = normalToricVariety(R, C);\n";

  // translating the bundle
  if #bundle[1] eq 0 then
    printf "X = {};\n";
  else
    F := ToricVariety(Rationals(), fan);

    bool, M := AreGradingsEquivalent(weights, Gradings(F));
    assert bool;

    N := M * Transpose(Matrix(bundle));
    X := RowSequence(Solution(Transpose(Matrix(Gradings(F))), Transpose(N)));

    // printing the bundle
    printf "X = {";
    for i := 1 to #X do
      printf "toricDivisor({";
      for j := 1 to #X[i] do
        printf "%o", X[i][j];
        if j ne #X[i] then printf ","; end if;
      end for;
      printf "}, F)";
      if i ne #X then printf ", "; end if;
    end for;
    printf "};\n";
  end if;

  // printing the dictionary entry
  printf "toric#\"%o\" = {F, X};\n", ID;

  return "";
end function;


// Four lists of toric complete intersections, grouped by codimension
// with entries of shape <ID, weights, bundle>

// for codimension zero we have that [[]] signifies the zero bundle
codimension_zero := [
  <"1-17", [[1,1,1,1]], [[]]>,

  <"2-33", [[1,1,-1,0,0], [0,0,1,1,1]], [[]]>,
  <"2-34", [[1,1,0,0,0], [0,0,1,1,1]], [[]]>,
  <"2-35", [[1,1,1,-1,0], [0,0,0,1,1]], [[]]>,
  <"2-36", [[1,1,1,-2,0], [0,0,0,1,1]], [[]]>,

  <"3-25", [[1,1,0,0,-1,0], [0,0,1,1,0,-1], [0,0,0,0,1,1]], [[]]>,
  <"3-26", [[1,1,0,1,-1,0], [0,0,1,1,0,-1], [0,0,0,-1,1,1]], [[]]>,
  <"3-27", [[1,1,0,0,0,0], [0,0,1,1,0,0], [0,0,0,0,1,1]], [[]]>,
  <"3-28", [[1,1,0,0,0,0], [0,0,1,1,-1,0], [0,0,0,0,1,1]], [[]]>,
  <"3-29", [[1,0,0,-1,0,1], [0,1,1,0,-2,1], [0,0,0,1,1,-1]], [[]]>,
  <"3-30", [[1,1,-1,0,0,0], [0,0,1,1,-1,0], [0,0,0,0,1,1]], [[]]>,
  <"3-31", [[1,1,0,0,-1,0], [0,0,1,1,-1,0], [0,0,0,0,1,1]], [[]]>,

  <"4-9", [[1,1,0,0,-1,0,0], [0,0,1,1,0,-1,0], [0,0,0,-1,0,1,1], [0,0,0,1,1,-0,-1]], [[]]>,
  <"4-10", [[1,0,1,-1,0,0,0], [0,1,1,0,-1,0,0], [0,0,-1,1,1,0,0], [0,0,0,0,0,1,1]], [[]]>,
  <"4-11", [[1,0,0,0,-1,0,1], [0,0,1,1,-1,0,0], [0,-1,0,0,0,1,1], [0,1,0,0,1,0,-1]], [[]]>,
  <"4-12", [[1,1,-1,0,0,0,0], [0,0,-1,0,0,1,1], [0,0,1,1,0,-1,0], [0,0,1,0,1,0,-1]], [[]]>,

  <"5-2", [[1,1,0,0,-1,0,0,0], [0,0,1,1,0,-1,0,0], [0,0,0,1,1,0,-1,0], [0,0,1,0,1,0,0,-1], [0,0,-1,-1,-1,1,1,1]], [[]]>,
  <"5-3", [[1,0,0,0,1,-1,0,0], [0,1,0,0,1,0,0,0], [0,0,1,0,0,1,0,0], [0,0,0,1,-1,1,0,0], [0,0,0,0,0,0,1,1]], [[]]>
];

codimension_one := [
  <"1-1", [[1,1,1,1,3]], [[6]]>,
  <"1-2", [[1,1,1,1,1]], [[4]]>,
  <"1-11", [[1,1,1,2,3]], [[6]]>,
  <"1-12", [[1,1,1,1,2]], [[4]]>,
  <"1-13", [[1,1,1,1,1]], [[3]]>,
  <"1-16", [[1,1,1,1,1]], [[2]]>,

  <"2-2", [[1,1,0,0,0,1], [0,0,1,1,1,2]], [[2,4]]>,
  <"2-4", [[1,1,0,0,0,0], [0,0,1,1,1,1]], [[1,3]]>,
  <"2-5", [[1,1,-1,0,0,0], [0,0,1,1,1,1]], [[0,3]]>,
  <"2-6", [[1,1,1,0,0,0], [0,0,0,1,1,1]], [[2,2]]>,
  <"2-8", [[1,1,1,-1,0,1], [0,0,0,1,1,1]], [[2,2]]>,
  <"2-11", [[1,1,1,-1,0,0], [0,0,0,1,1,1]], [[1,2]]>,
  <"2-15", [[1,1,1,1,-1,0], [0,0,0,0,1,1]], [[2,1]]>,
  <"2-18", [[1,1,1,0,0,1], [0,0,0,1,1,1]], [[2,2]]>,
  <"2-24", [[1,1,1,0,0,0], [0,0,0,1,1,1]], [[1,2]]>,
  <"2-25", [[1,1,0,0,0,0], [0,0,1,1,1,1]], [[1,2]]>,
  <"2-28", [[1,1,1,1,-2,0], [0,0,0,0,1,1]], [[1,1]]>,
  <"2-29", [[1,1,-1,0,0,0], [0,0,1,1,1,1]], [[0,2]]>,
  <"2-30", [[1,1,1,1,-1,0], [0,0,0,0,1,1]], [[1,1]]>,
  <"2-31", [[1,1,1,-1,0,0], [0,0,0,1,1,1]], [[1,1]]>,
  <"2-32", [[1,1,1,0,0,0], [0,0,0,1,1,1]], [[1,1]]>,

  <"3-1", [[1,1,0,0,0,0,1], [0,0,1,1,0,0,1], [0,0,0,0,1,1,1]], [[2,2,2]]>,
  <"3-2", [[1,1,0,0,-1,0,0], [0,0,1,1,-1,0,0], [0,0,0,0,1,1,1]], [[0,1,2]]>,
  <"3-3", [[1,1,0,0,0,0,0], [0,0,1,1,0,0,0], [0,0,0,0,1,1,1]], [[1,1,2]]>,
  <"3-4", [[1,1,-1,0,0,0,0], [0,0,1,1,-1,-1,0], [0,0,0,0,1,1,1]], [[0,0,2]]>,
  <"3-6", [[1,1,-1,0,0,0,0], [0,0,1,1,1,0,0], [0,0,0,0,0,1,1]], [[0,2,1]]>,
  <"3-8", [[1,1,-1,0,0,0,0], [0,0,1,1,0,0,0], [0,0,0,0,1,1,1]], [[0,1,2]]>,
  <"3-9", [[1,1,1,-2,0,0], [0,0,0,1,1,1]], [[0,2]]>,
  <"3-10", [[1,1,0,0,-1,0,0], [0,0,1,1,0,-1,0], [0,0,0,0,1,1,1]], [[0,0,2]]>,
  <"3-11", [[1,1,1,-1,0,0,0], [0,0,0,1,1,0,0], [0,0,0,0,0,1,1]], [[1,1,1]]>,
  <"3-14", [[1,1,1,-1,0,-2,0], [0,0,0,1,1,0,0], [0,0,0,0,0,1,1]], [[0,1,1]]>,
  <"3-15", [[1,1,1,0,0,-1,0], [0,0,0,1,1,0,-1], [0,0,0,0,0,1,1]], [[1,0,1]]>,
  <"3-17", [[1,1,0,0,0,0,0], [0,0,1,1,0,0,0], [0,0,0,0,1,1,1]], [[1,1,1]]>,
  <"3-18", [[1,1,-1,0,0,0,0], [0,0,1,1,1,-1,0], [0,0,0,0,0,1,1]], [[0,1,1]]>,
  <"3-19", [[1,1,1,-1,0,0], [0,0,0,1,1,1]], [[0,2]]>,
  <"3-20", [[1,1,0,0,1,-1,0], [0,0,1,1,1,0,-1], [0,0,0,0,-1,1,1]], [[1,1,0]]>,
  <"3-21", [[1,1,0,0,0,0,-1], [0,0,1,1,1,0,-1], [0,0,0,0,0,1,1]], [[0,1,1]]>,
  <"3-22", [[1,1,0,0,0,-1,0], [0,0,1,1,1,0,-2], [0,0,0,0,0,1,1]], [[0,0,1]]>,
  <"3-23", [[1,1,1,-1,0,0,0], [0,0,0,1,1,-1,0], [0,0,0,0,0,1,1]], [[1,0,1]]>,
  <"3-24", [[1,1,-1,0,0,0,0], [0,0,1,1,0,0,0], [0,0,0,0,1,1,1]], [[0,1,1]]>,

  <"4-1", [[1,1,0,0,0,0,0,0], [0,0,1,1,0,0,0,0], [0,0,0,0,1,1,0,0], [0,0,0,0,0,0,1,1]], [[1,1,1,1]]>,
  <"4-2", [[1,1,0,0,-1,0,0], [0,0,1,1,-1,0,0], [0,0,0,0,1,1,1]], [[0,0,2]]>, // 4-3 in Fanosearch
  <"4-3", [[1,1,0,0,0,0,0,0], [0,0,1,1,0,0,0,0], [0,0,0,0,1,1,-1,0], [0,0,0,0,0,0,1,1]], [[1,1,0,1]]>, // 4-4 in Fanosearch
  <"4-4", [[1,1,-1,0,0,0,0], [0,0,1,1,-1,0,0], [0,0,0,0,1,1,1]], [[0,0,2]]>, // 4-5 in Fanosearch
  <"4-5", [[1,1,0,0,-1,0,-1,0], [0,0,1,1,0,0,-1,0], [0,0,0,0,1,1,0,0], [0,0,0,0,0,0,1,1]], [[0,0,1,1]]>, // 4-6 in Fanosearch
  <"4-7", [[1,1,-1,0,0,0,0,0], [0,0,1,1,0,0,0,0], [0,0,0,0,1,1,-1,0], [0,0,0,0,0,0,1,1]], [[0,1,0,1]]>, // 4-8 in Fanosearch
  <"4-8", [[1,1,0,0,0,0,0,-1], [0,0,1,1,0,0,0,-1], [0,0,0,0,1,1,-1,0], [0,0,0,0,0,0,1,1]], [[0,0,0,1]]>, // 4-9 in Fanosearch
  <"4-13", [[1,1,0,0,0,0,-1,0], [0,0,1,1,0,0,-1,0], [0,0,0,0,1,1,0,0], [0,0,0,0,0,0,1,1]], [[0,1,1,1]]>, // 4-2 in Fanosearch

  <"5-1", [[1,1,1,1,1,0,0,0,0], [1,1,1,0,0,1,0,0,0], [1,0,0,0,0,0,1,0,0], [0,1,0,0,0,0,0,1,0], [0,0,1,0,0,0,0,0,1]], [[2,2,1,1,1]]>,

  <"6-1", [[1,1,0,0,0,0,0], [0,0,1,1,1,0,0], [0,0,0,0,0,1,1]], [[1,0,0], [0,2,0]]>,

  <"8-1", [[1,1,1,1,0,0], [0,0,0,0,1,1]], [[3,0]]>,

  <"9-1", [[1,1,1,2,0,0], [0,0,0,0,1,1]], [[4,0]]>,

  <"10-1", [[1,1,2,3,0,0], [0,0,0,0,1,1]], [[6,0]]>
];

codimension_two := [
  <"1-3", [[1,1,1,1,1,1]], [[2], [3]]>,
  <"1-14", [[1,1,1,1,1,1]], [[2], [2]]>,

  <"2-1", [[1,1,1,2,3,0,0], [0,0,0,0,0,1,1]], [[6,0], [1,1]]>,
  <"2-3", [[1,1,1,1,2,0,0], [0,0,0,0,0,1,1]], [[4,0], [1,1]]>,
  <"2-7", [[1,1,0,0,0,0,0], [0,0,1,1,1,1,1]], [[0,2], [1,2]]>,
  <"2-9", [[1,1,1,1,0,0,0], [0,0,0,0,1,1,1]], [[1,1], [2,1]]>,
  <"2-10", [[1,1,-1,0,0,0,0], [0,0,1,1,1,1,1]], [[0,2], [0,2]]>,
  <"2-16", [[1,1,1,-1,0,0,0], [0,0,0,1,1,1,1]], [[1,1], [0,2]]>,
  <"2-19", [[1,1,1,1,-1,0,0], [0,0,0,0,1,1,1]], [[1,1], [1,1]]>,
  <"2-23", [[1,1,1,1,1,-1,0], [0,0,0,0,0,1,1]], [[1,1], [2,0]]>,
  <"2-27", [[1,1,1,1,0,0,0], [0,0,0,0,1,1,1]], [[1,1], [1,1]]>,

  <"3-5", [[1,1,0,0,0,-1,0,0], [0,0,1,1,1,-1,0,0], [0,0,0,0,0,1,1,1]], [[0,1,1], [0,1,1]]>,
  <"3-7", [[1,1,0,0,0,0,0,0], [0,0,1,1,1,0,0,0], [0,0,0,0,0,1,1,1]], [[0,1,1], [1,1,1]]>,
  <"3-12", [[1,1,-1,0,0,0,0,0], [0,0,1,1,1,0,0,0], [0,0,0,0,0,1,1,1]], [[0,1,1], [0,1,1]]>,
  <"3-16", [[1,1,1,-1,0,0,-1,-1], [0,0,0,1,1,-1,0,0], [0,0,0,0,0,1,1,1]], [[0,0,1], [0,0,1]]>,

  <"4-6", [[1,1,0,0,0,0,-1,0,0], [0,0,1,1,0,0,0,-1,0], [0,0,0,0,1,1,0,0,-1], [0,0,0,0,0,0,1,1,1]], [[0,0,0,1], [0,0,0,1]]>, // 4-7 in Fanosearch

  <"7-1", [[1,1,1,1,1,0,0], [0,0,0,0,0,1,1]], [[2,0], [2,0]]>
];

codimension_three := [
  <"1-4", [[1,1,1,1,1,1,1]], [[2], [2], [2]]>,

  <"2-12", [[1,1,1,1,0,0,0,0], [0,0,0,0,1,1,1,1]], [[1,1], [1,1], [1,1]]>,

  <"2-13", [[1,1,1,0,0,0,0,0], [0,0,0,1,1,1,1,1]], [[1,1], [1,1], [0,2]]>,
  <"3-13", [[1,1,1,0,0,0,0,0,0], [0,0,0,1,1,1,0,0,0], [0,0,0,0,0,0,1,1,1]], [[1,1,0], [1,0,1], [0,1,1]]>
];


// the actual output code
printf "toric = new MutableHashTable;\n\n";

for codimension in [codimension_zero, codimension_one, codimension_two, codimension_three] do
  for tuple in codimension do
    ID, F, X := Explode(tuple);

    ToricDescription(ID, F, X);
  end for;
end for;
